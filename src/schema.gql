# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AddressDto {
  city: String!
  country: String!
  street: String!
  zip: String!
}

input CreateTeaInput {
  """Ideal brewing temperature"""
  bestAtTemperature: Int!
  description: String!
  imageUrl: String!

  """English name of the tea"""
  name: String!

  """Price in USD"""
  price: Float!
}

input CreateUserInput {
  address: UserAddressInput!
  email: String!
  firstname: String!
  lastname: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input Filter {
  contains: String
  in: [String!]
}

type Mutation {
  createTea(input: CreateTeaInput!): Tea!
  createUser(input: CreateUserInput!): UserDto!
  removeTea(id: ID!): Boolean!
  removeUser(id: ID!): UserDto!

  """Partially update the tea"""
  updateTea(input: UpdateTeaInput!): Tea!
  updateUser(input: UpdateUserInput!): UserDto!
}

type PaginatedTeas {
  cursor: String
  data: [Tea!]!
  totalCount: Int!
  totalCountFiltered: Int!
}

"""
For an explanation of Offset Pagination vs Cursor-based pagination, see https://www.prisma.io/docs/concepts/components/prisma-client/pagination
"""
input Paging {
  """
  Hint: Use skip: 1 to exclude the object at the cursor.
  Hint: Use take: -4, skip: 1 to get the 4 objects before the cursor.
  """
  fromIdCursor: String
  skip: Int
  take: Int = 20
}

type Query {
  tea(id: ID!): Tea!
  teas(filter: TeaFilter, paging: Paging, sorting: TeaSorting): PaginatedTeas!
  user(id: ID!): UserDto!
  users: [UserDto!]!
}

enum SortingDirection {
  ascending
  descending
}

type Tea {
  """Ideal brewing temperature"""
  bestAtTemperature: Int!
  createdAt: DateTime!
  currency: String!
  description: String!
  id: ID!
  imageUrl: String!

  """English name of the tea"""
  name: String!

  """Price in USD"""
  price: Float!
  rating: Int!
  ratingCount: Int!

  """freetext tags for searchability"""
  tags: String!
  updatedAt: DateTime!
}

input TeaFilter {
  ids: [String!]
  name: Filter
  tags: Filter
}

input TeaSorting {
  bestAtTemperature: SortingDirection
  createdAt: SortingDirection
  description: SortingDirection
  id: SortingDirection
  name: SortingDirection
  price: SortingDirection
}

input UpdateTeaInput {
  """Ideal brewing temperature"""
  bestAtTemperature: Int
  description: String
  id: ID!
  imageUrl: String

  """English name of the tea"""
  name: String

  """Price in USD"""
  price: Float
  tags: String
}

input UpdateUserInput {
  address: UserAddressInput
  email: String
  firstname: String
  id: String!
  lastname: String
}

input UserAddressInput {
  city: String!
  country: String!
  street: String!
  zip: String!
}

type UserDto {
  address: AddressDto!
  email: String!
  firstname: String!
  id: String!
  lastname: String!
}